describe('Polygon to Geo Domain', function () {
    it('Should return the correct base geo domains for the given polygon', async function () {
        const polygonGeometry = {
            "type": "Polygon",
            "coordinates": [
                [
                    [
                        -79.94671797604462,
                        40.444304523242465
                    ],
                    [
                        -79.94687042194538,
                        40.44372619379834
                    ],
                    [
                        -79.94637843744837,
                        40.44361896499586
                    ],
                    [
                        -79.9462768068479,
                        40.4438386959647
                    ],
                    [
                        -79.9462929753527,
                        40.44433089072757
                    ],
                    [
                        -79.94671797604462,
                        40.444304523242465
                    ]
                ]
            ]
        }
        const baseGeoDomains = await dnsspatialdiscovery.LocationToGeoDomain.getBaseGeoDomains(polygonGeometry);

        const expectedBaseGeoDomains = [
            ['2', '0', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['0', '3', '0', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['0', '1', '3', '0', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['2', '3', '1', '3', '0', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['1', '0', '1', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['1', '2', '0', '1', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['2', '2', '0', '1', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['3', '1', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['0', '2', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['1', '3', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4']
        ]
        assert.deepEqual(baseGeoDomains, expectedBaseGeoDomains);
    });

    it('Should return the correct base geo domains for the given polygon in CCW order', async function () {
        const polygonGeometry = {
            "type": "Polygon",
            "coordinates": [
                [
                    [
                        -79.94671797604462,
                        40.444304523242465
                    ],
                    [
                        -79.94687042194538,
                        40.44372619379834
                    ],
                    [
                        -79.94637843744837,
                        40.44361896499586
                    ],
                    [
                        -79.9462768068479,
                        40.4438386959647
                    ],
                    [
                        -79.9462929753527,
                        40.44433089072757
                    ],
                    [
                        -79.94671797604462,
                        40.444304523242465
                    ]
                ]
            ]
        }
        // Reverse the coordinates to counter clockwise
        polygonGeometry.coordinates[0] = polygonGeometry.coordinates[0].reverse();
        const baseGeoDomains = await dnsspatialdiscovery.LocationToGeoDomain.getBaseGeoDomains(polygonGeometry);

        const expectedBaseGeoDomains = [
            ['2', '0', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['0', '3', '0', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['0', '1', '3', '0', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['2', '3', '1', '3', '0', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['1', '0', '1', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['1', '2', '0', '1', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['2', '2', '0', '1', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['3', '1', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['0', '2', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4'],
            ['1', '3', '2', '2', '0', '0', '1', '0', '1', '2', '3', '1', '2', '2', '1', '0', '0', '1', '4']
        ]
        assert.deepEqual(baseGeoDomains, expectedBaseGeoDomains);
    });
});